{"version":3,"sources":["components/Board/Board.module.css","container/Game.module.css","components/Square/Square.module.css","components/Square/Square.js","components/Board/Board.js","container/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","styles","style","winnerColor","id","index","onClick","click","value","Board","renderSquare","i","winnerItems","length","indexOf","color","squares","Row","winCombos","Human","Ai","Game","clickSquare","e","newArr","state","target","setState","turnSquare","checkDraw","opponentMove","clickReplay","Array","fill","winnerArr","winner","draw","player","winnerObj","checkWin","playerArr","reduce","total","val","concat","whoWon","gameWon","entries","every","elem","name","winGame","availableSquares","cur","arr","willAiWin","checkWhoWillWin","willHumanWin","avaiArr","filter","position","corner","findNeighbor","redCrossArr","findPosition","arrGroup","positionObj","count","clickEvent","this","guide","Replay","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,IAAM,qB,gBCAxBD,EAAOC,QAAU,CAAC,MAAQ,oBAAoB,OAAS,uB,sBCAvDD,EAAOC,QAAU,CAAC,OAAS,yB,gPCGZC,EAFF,SAACC,GAAD,OAAS,4BAAQC,UAAWC,IAAOH,OAAQI,MAAOH,EAAMI,YAAaC,GAAIL,EAAMM,MAAOC,QAASP,EAAMQ,OAAQR,EAAMS,QC2CjHC,EAzCH,SAACV,GACL,IAAMW,EAAa,SAACC,GAChB,IAAIT,EAAM,KAEV,OADGH,EAAMa,YAAYC,OAAO,GAAKd,EAAMa,YAAYE,QAAQH,IAAI,IAAIT,EAAM,CAACa,MAAM,YACzE,kBAAC,EAAD,CAAQZ,YAAaD,EAAOM,MAAOT,EAAMiB,QAAQL,GAAIN,MAAOM,EAAGJ,MAAOR,EAAMQ,SAEvF,OAAQ,6BACI,6BAASP,UAAWE,IAAMe,KACrBP,EAAa,GACbA,EAAa,GACbA,EAAa,IAOlB,6BAASV,UAAWE,IAAMe,KACrBP,EAAa,GACbA,EAAa,GACbA,EAAa,IAOlB,6BAASV,UAAWE,IAAMe,KACrBP,EAAa,GACbA,EAAa,GACbA,EAAa,M,gBC/BhCQ,EAAU,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IACxEC,EAAM,IACNC,EAAG,IAwHMC,E,YAtHX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KASVuB,YAAY,SAACC,GACT,IAAMC,EAAO,YAAI,EAAKC,MAAMT,SACxBQ,EAAOD,EAAEG,OAAOtB,MAChBoB,EAAOD,EAAEG,OAAOtB,IAAIe,EACpB,EAAKQ,SAAS,CAACX,QAAQQ,IAAQ,WAC3B,EAAKI,WAAWT,GACZ,EAAKU,aACN,EAAKF,SAAS,CAACX,QAAQ,EAAKc,iBAAgB,kBAAK,EAAKF,WAAWR,WAjB7D,EAuBnBW,YAAY,WACR,IAAMP,EAAOQ,MAAM,GAAGC,KAAK,MAC3B,EAAKN,SAAS,CAACX,QAAQQ,EAAOU,UAAU,GAAG3B,OAAM,EAAK4B,OAAO,KAAKC,MAAK,KAzBxD,EA2BnBR,WAAW,SAACS,GACR,IAAIC,EAAU,EAAKC,SAASF,GACzBC,GAAY,EAAKX,SAAS,CAACO,UAAUhB,EAAUoB,EAAUjC,OAAOE,OAAM,EAAM4B,OAAOG,KA7BvE,EA+BnBC,SAAS,SAACF,GACN,IAAIG,EAAU,EAAKf,MAAMT,QAAQyB,QAAO,SAACC,EAAMC,EAAItC,GAAX,OAAmBsC,IAAMN,EAAOK,EAAME,OAAOvC,GAAOqC,IAAM,IAC9FG,EAAO,EAAKpB,MAAMqB,QAFP,uBAGf,YAAwB5B,EAAU6B,UAAlC,+CAA6C,CAAC,IAAD,6BAAnC1C,EAAmC,KACzC,GADyC,KAClC2C,OAAM,SAAAC,GAAI,OAAET,EAAU1B,QAAQmC,IAAO,KAAI,CAC5CJ,EAAO,CAACK,KAAKb,EAAOhC,SACpB,QANO,kFASf,OAAOwC,GAxCQ,EA0CnBM,QAAQ,SAACd,GAAD,OAAUA,EAAOa,OAAO/B,EAAM,MAAM,WA1CzB,EA2CnBU,UAAU,WACN,OAAoC,IAAjC,EAAKuB,mBAAmBvC,SAAc,EAAKc,SAAS,CAACpB,OAAM,EAAM6B,MAAK,KAAe,IA5CzE,EA+CnBgB,iBAAiB,kBAAI,EAAK3B,MAAMT,QAAQyB,QAAO,SAACC,EAAMW,EAAIhD,GAAX,OAAqBgD,EAAyBX,EAApBA,EAAME,OAAOvC,KAAa,KA/ChF,EAiDnByB,aAAa,WACT,IAAMwB,EAAI,YAAI,EAAK7B,MAAMT,SACnBuC,EAAU,EAAKC,gBAAgBpC,GAC/BqC,EAAa,EAAKD,gBAAgBrC,GAClCuC,EAAQ,EAAKN,mBACb5B,EAAOkC,EAAQC,QAAO,SAAAN,GAAG,OAAEA,EAAI,IAAI,KACzC,GAAGE,EAAYD,EAAIC,EAAUK,UAAUxC,OAClC,GAAGqC,EAAeH,EAAIG,EAAaG,UAAUxC,OAC7C,GAAIkC,EAAI,GACR,GAAGA,EAAI,KAAKnC,EACVK,EAAOX,OAAO,EAAIyC,EAAI9B,EAAO,IAAIJ,EAC9BkC,EAAII,EAAQ,IAAItC,MAErB,CAGD,IAAIyC,EAAOrC,EAAOmC,QAAO,SAAAhB,GAAG,OAAG,EAAKmB,aAAanB,GAAKgB,QAAO,SAAAhB,GAAG,OAAEW,EAAIX,KAAOxB,KAAQN,OAAO,KAC5F,GAAGgD,EAAOhD,OAAO,EAAIyC,EAAIO,EAAO,IAAIzC,MAC/B,CAED,IAAM2C,EAAYL,EAAQC,QAAO,SAAAN,GAAG,OAAEA,EAAI,EAAE,KACzCU,EAAYlD,OAAO,EAAIyC,EAAIS,EAAY,IAAI3C,EACxCkC,EAAII,EAAQ,IAAItC,QAdZkC,EAAI,GAAGlC,EAiB5B,OAAQkC,GA1EU,EA6EnBQ,aAAa,SAACzD,GACV,MAAO,CAACA,EAAM,EAAEA,EAAM,EAAEA,EAAM,EAAEA,EAAM,GAAGsD,QAAO,SAAAhB,GAAG,OAAEA,GAAK,GAAGA,GAAK,MA9EnD,EAkFnBqB,aAAa,SAAC3B,EAAO4B,GACjB,IAAIC,EAAY,KACZ1B,EAAU,EAAKf,MAAMT,QAAQyB,QAAO,SAACC,EAAMC,EAAItC,GAAX,OAAoBsC,IAAMN,EAAQK,EAAME,OAAOvC,GAAOqC,IAAM,IAFxE,uBAG5B,YAAiBuB,EAAjB,+CAEI,IAFwB,IAAnBhB,EAAkB,QACnBkB,EAAM,EAAG9D,EAAM,EACVM,EAAE,EAAEA,EAAEsC,EAAKpC,OAAOF,IAGvB,GAFG6B,EAAU1B,QAAQmC,EAAKtC,KAAK,EAAIwD,IAC7B9D,EAAMM,EACD,IAARwD,IACK,EAAK1C,MAAMT,QAAQiC,EAAK5C,IAAS,CACjC6D,EAAY,CAACN,SAASX,EAAK5C,IAC3B,OAXY,kFAgB5B,OAAO6D,GAlGQ,EAoGnBV,gBAAgB,SAACnB,GACb,OAAO,EAAK2B,aAAa3B,EAAOnB,IAnGhC,EAAKO,MAAM,CACPT,QAAQgB,MAAM,GAAGC,KAAK,MACtBC,UAAU,GACV3B,OAAM,EACN4B,OAAO,KACPC,MAAK,GAPM,E,sEAyGf,IAAMgC,EAAWC,KAAK5C,MAAMlB,MAAM8D,KAAK/C,YAAY,KAC7CgD,EAAMD,KAAK5C,MAAMlB,MAAM,mBAAoB,aAC7C4B,EAAOkC,KAAK5C,MAAMU,OAAO,0BAAMjC,MAAO,CAACa,MAAM,YAAasD,KAAKlB,QAAQkB,KAAK5C,MAAMU,QAAzD,UAA+E,KAC5G,OAAO,yBAAKnC,UAAWC,IAAOQ,OAClB,2CACA,4BAAK6D,GACL,kBAAC,EAAD,CAAOtD,QAASqD,KAAK5C,MAAMT,QAAST,MAAO6D,EAAYxD,YAAayD,KAAK5C,MAAMS,YAC/E,2BAAIC,EAAJ,IAAakC,KAAK5C,MAAMW,KAAX,eAA+B,MAC5C,4BAAQpC,UAAWC,IAAOsE,OAAQjE,QAAS+D,KAAKtC,aAAhD,e,GAlHDyC,a,MCMJC,MARf,WACE,OACE,yBAAKzE,UAAU,OACd,kBAAC,EAAD,QCKe0E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7839fb8d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Row\":\"Board_Row__Lt-7P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Game_Board__3HInH\",\"Replay\":\"Game_Replay__2TpLR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Square\":\"Square_Square__2k8C-\"};","import React from 'react';\r\nimport styles from './Square.module.css';\r\nconst Square=(props)=><button className={styles.Square} style={props.winnerColor} id={props.index} onClick={props.click}>{props.value}</button>;\r\n\r\nexport default Square;\r\n","import React from 'react';\r\nimport style from './Board.module.css';\r\nimport Square from '../Square/Square';\r\n\r\nconst Board=(props)=>{\r\n        const renderSquare=(i)=>{\r\n            let style=null;\r\n            if(props.winnerItems.length>0 && props.winnerItems.indexOf(i)>-1) {style={color:'#2ecc71'}}\r\n            return <Square winnerColor={style} value={props.squares[i]} index={i} click={props.click} />\r\n        }\r\n        return  <div>\r\n                    <section className={style.Row}>\r\n                        {renderSquare(0)}\r\n                        {renderSquare(1)}\r\n                        {renderSquare(2)}\r\n                    {/*\r\n                        <Square value={props.squares[0]} index={0} click={props.click}/>\r\n                        <Square value={props.squares[1]} index={1} click={props.click}/>\r\n                        <Square value={props.squares[2]} index={2} click={props.click}/>\r\n                    */}\r\n                    </section>\r\n                    <section className={style.Row}>\r\n                        {renderSquare(3)}\r\n                        {renderSquare(4)}\r\n                        {renderSquare(5)}\r\n                    {/*\r\n                        <Square value={props.squares[3]} index={3} click={props.click}/>\r\n                        <Square value={props.squares[4]} index={4} click={props.click}/>\r\n                        <Square value={props.squares[5]} index={5} click={props.click}/>\r\n                    */}\r\n                    </section>\r\n                    <section className={style.Row}>\r\n                        {renderSquare(6)}\r\n                        {renderSquare(7)}\r\n                        {renderSquare(8)}\r\n                    {/*\r\n                        <Square value={props.squares[6]} index={6} click={props.click}/>\r\n                        <Square value={props.squares[7]} index={7} click={props.click}/>\r\n                        <Square value={props.squares[8]} index={8} click={props.click}/>\r\n                    */}\r\n                    </section>\r\n                </div>\r\n}\r\n\r\n\r\nexport default Board;\r\n","import React,{Component} from 'react';\r\nimport Board from '../components/Board/Board';\r\nimport styles from './Game.module.css';\r\nconst winCombos=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];\r\nconst Human='X';\r\nconst Ai='O';\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            squares:Array(9).fill(null),\r\n            winnerArr:[],\r\n            click:true,\r\n            winner:null,\r\n            draw:false\r\n        }\r\n    }\r\n    clickSquare=(e)=>{\r\n        const newArr=[...this.state.squares];\r\n        if(!newArr[e.target.id]) {\r\n            newArr[e.target.id]=Human;\r\n            this.setState({squares:newArr},()=>{\r\n                this.turnSquare(Human);//each time clicking, you need to check if it wins, if yes end the game, otherwise check if it draw\r\n                if(!this.checkDraw()) {//if not a draw, AI moving\r\n                   this.setState({squares:this.opponentMove()},()=> this.turnSquare(Ai));\r\n                    }\r\n                }\r\n            ); \r\n        }   \r\n    }\r\n    clickReplay=()=>{\r\n        const newArr=Array(9).fill(null);\r\n        this.setState({squares:newArr,winnerArr:[],click:true,winner:null,draw:false}); \r\n    }\r\n    turnSquare=(player)=>{\r\n        let winnerObj=this.checkWin(player);\r\n        if(winnerObj) {this.setState({winnerArr:winCombos[winnerObj.index],click:false,winner:winnerObj});}\r\n    }\r\n    checkWin=(player)=>{\r\n        let playerArr=this.state.squares.reduce((total,val,index)=>val===player?total.concat(index):total,[]);\r\n        let whoWon=this.state.gameWon;\r\n        for (let [index,win] of winCombos.entries()) {\r\n            if(win.every(elem=>playerArr.indexOf(elem)>-1)) {\r\n                whoWon={name:player,index};\r\n                break;\r\n            }\r\n        }\r\n        return whoWon;\r\n    }\r\n    winGame=(player)=>player.name===Human?'You':'Program';\r\n    checkDraw=()=>{\r\n        if(this.availableSquares().length===0) { this.setState({click:false,draw:true}); return true; }\r\n        return false;\r\n    }\r\n    availableSquares=()=>this.state.squares.reduce((total,cur,index)=>(!cur)?total.concat(index):total,[]);\r\n//------------------------------AI section-----------------------------------\r\n    opponentMove=()=> {\r\n        const arr=[...this.state.squares];\r\n        const willAiWin=this.checkWhoWillWin(Ai);\r\n        const willHumanWin=this.checkWhoWillWin(Human);\r\n        const avaiArr=this.availableSquares();\r\n        const newArr=avaiArr.filter(cur=>cur%2===0);//available corner position array\r\n        if(willAiWin) {arr[willAiWin.position]=Ai;}\r\n        else if(willHumanWin) {arr[willHumanWin.position]=Ai;}\r\n        else if(!arr[4]) {arr[4]=Ai;}\r\n        else if(arr[4]===Human) {\r\n            if(newArr.length>0) {arr[newArr[0]]=Ai;}\r\n            else {arr[avaiArr[0]]=Ai;}\r\n        }\r\n        else {//what should do if the middle point is taken by Program\r\n            //decide when to take one of left-top, right-top, left-bottom and right-bottom positions\r\n            //the position should be availabe and has at least one Human neighbor \r\n            let corner=newArr.filter(val=>(this.findNeighbor(val).filter(val=>arr[val]===Human)).length>0);\r\n            if(corner.length>0) {arr[corner[0]]=Ai;}\r\n            else {//if no such corner position, find avaiable position in red cross direction\r\n                //otherwise, take the available position\r\n                const redCrossArr=avaiArr.filter(cur=>cur%2>0);\r\n                if(redCrossArr.length>0) {arr[redCrossArr[0]]=Ai;}\r\n                else {arr[avaiArr[0]]=Ai;}\r\n            }\r\n        }\r\n     return  arr;   \r\n    }\r\n   \r\n    findNeighbor=(index)=>{\r\n        return [index-1,index+1,index-3,index+3].filter(val=>val>=0&&val<=8);\r\n    }\r\n    \r\n    \r\n    findPosition=(player,arrGroup)=>{\r\n        let positionObj=null;\r\n        let playerArr=this.state.squares.reduce((total,val,index)=>(val===player)?total.concat(index):total,[]);\r\n        for (let elem of arrGroup) {\r\n            let count=0, index=0;\r\n            for (let i=0;i<elem.length;i++) {\r\n                if(playerArr.indexOf(elem[i])>-1) {count++;}\r\n                else {index=i;}\r\n                if(count===2) {\r\n                    if(!this.state.squares[elem[index]]) {//check if it's available\r\n                        positionObj={position:elem[index]};\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return positionObj;\r\n    }\r\n    checkWhoWillWin=(player)=>{\r\n        return this.findPosition(player,winCombos);\r\n    }\r\n//---------------------------------end----------------------------------------\r\n    render() {\r\n        const clickEvent=this.state.click?this.clickSquare:null;\r\n        const guide=this.state.click?'Pick up a square': 'Game ends.';\r\n        let winner=this.state.winner?<span style={{color:'#2ecc71'}}>{this.winGame(this.state.winner)} wins!</span>:null;\r\n        return <div className={styles.Board}>\r\n                    <h1>Tic Tac Toe</h1>\r\n                    <h2>{guide}</h2>\r\n                    <Board squares={this.state.squares} click={clickEvent} winnerItems={this.state.winnerArr} />\r\n                    <p>{winner} {this.state.draw?`It's a draw.`:null}</p>\r\n                    <button className={styles.Replay} onClick={this.clickReplay}>Replay</button>  \r\n                </div>;\r\n    }\r\n\r\n}\r\nexport default Game;\r\n","import React from 'react';\nimport Game from './container/Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}